class Module(BaseModule):
    """
    Self-modulated frequency sound looper.
    
    Sliders under the graph:
    
        - Transposition : Transposition, in cents, of the input sound
        - Feedback : Amount of self-modulation in sound playback
        - Filter Frequency : Frequency, in Hertz, of the filter
        - Filter Q : Q of the filter (inverse of the bandwidth)
    
    Dropdown menus and toggles on the bottom left:
    
        - Filter Type : Type of the filter
        - # of Voices : Number of voices played simultaneously (polyphony), 
                        only available at initialization time
        - Polyphony Chords : Pitch interval between voices (chords), 
                             only available at initialization time

    Graph only parameters :
    
        - Overall Amplitude : The amplitude curve applied on the total duration 
                              of the performance

    """
    def __init__(self):
        BaseModule.__init__(self)

        # Creation de la table (SndTable) a partir du son selectionne. 
        # La methode addFilein se charge d'assurer que le nombre de canaux de 
        # la table est consequent avec le nombre de canaux de Cecilia.
        self.snd = self.addFilein("snd")

        # Conversion des valeurs donnees en "cents" en facteur de transposition 
        # (CentsToTranspo). On multiplie ici par "self.polyphony_spread" qui 
        # est la liste de transposition donnee par le menu "cpoly", en fonction 
        # de l'accord choisi et du nombre de voix de polyphonie. "self.trfactor" 
        # contiendra donc autant de streams audio qu'il y a de valeurs dans la 
        # liste "self.polyphony_spread".
        self.trfactor = CentsToTranspo(self.transpo, mul=self.polyphony_spread)
        
        # Les facteurs de transpo sont multiplies par la frequence a laquelle 
        # la table doit etre lue pour obtenir la hauteur originale du son.
        self.freq = Sig(self.trfactor, mul=self.snd.getRate())
        
        # OscLoop fonctionne comme SineLoop, mais on lui donne la table a lire 
        # en argument (le fichier son ici). Le slider de feedback est multiplie 
        # par une petite valeur sinon le resultat est trop chaotique. 
        # "self.polyphony_scaling" est une valeur d'amplitude qui s'ajuste pour 
        # diminuer le volume quand le nombre de voix augmente (pour garder une 
        # amplitude constante).
        self.dsp = OscLoop(self.snd, self.freq, self.feed*0.0002, 
                           mul=self.polyphony_scaling * 0.5)
        
        # On mix le signaux selon nombre de canaux de Cecilia (self.nchnls).
        self.mix = self.dsp.mix(self.nchnls)
        
        # Variable de sortie (self.out). Un filtre avec controle en slider 
        # (self.filt_f, self.filt_q). "self.filt_t_index" est une variable cree 
        # par la classe BaseModule qui contient la position de l'item choisi 
        # dans le menu "filt_t". "self.env" est la ligne de graph pour 
        # l'amplitude globale.
        self.out = Biquad(self.mix, freq=self.filt_f, q=self.filt_q, 
                          type=self.filt_t_index, mul=self.env)

    # Le menu deroulant appelle a chaque manipulation une methode qui porte 
    # son nom ("filt_t" dans ce cas-ci). On doit absolument definir cette 
    # methode, avec les arguments index et value, pour que le module fonctionne.
    def filt_t(self, index, value):
        """
        index -> position de l'item dans le menu (entier)
        value -> valeur selectionnee dans le menu (string)
        """
        # On assigne l'index a l'argument "type" du Biquad
        self.out.type = index

Interface = [
    cfilein(name="snd"),
    cgraph(name="env", label="Overall Am", func=[(0,1),(1,1)], col="blue1"),
    cslider(name="transpo", label="Transposition", min=-4800, max=4800, init=0, 
            unit="cnts", col="red1"),
    cslider(name="feed", label="Feedback", min=0, max=1, init=0.25, unit="x", 
            col="purple1"),
    cslider(name="filt_f", label="Filter Frequency", min=20, max=18000, 
            init=10000, rel="log", unit="Hz", col="green1"),
    cslider(name="filt_q", label="Filter Q", min=0.5, max=25, init=1, rel="log", 
            unit="x", col="green2"),
    # cpopup genere un menu deroulant dans le panneau en bas a gauche
    cpopup(name="filt_t", label="Filter Type", init="Lowpass", col="green1",
           value=["Lowpass", "Highpass", "Bandpass", "Bandreject"]),
    cpoly()
]
